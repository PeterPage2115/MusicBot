try:
    import discord
    import yt_dlp
    import dotenv
except ImportError as e:
    print(f"B≈ÅƒÑD: Brak wymaganej zale≈ºno≈õci: {e}")
    print("Musisz zainstalowaƒá wszystkie wymagane biblioteki. U≈ºyj komendy:")
    print("pip install -r requirements.txt")
    exit(1)

# Sprawd≈∫ czy FFmpeg jest dostƒôpny
import shutil
if not shutil.which("ffmpeg"):
    print("OSTRZE≈ªENIE: FFmpeg nie zosta≈Ç znaleziony w PATH.")
    print("Bot mo≈ºe nie odtwarzaƒá d≈∫wiƒôku. Zainstaluj FFmpeg i upewnij siƒô, ≈ºe jest w PATH.")

import os
import discord
from discord.ext import commands, tasks
import asyncio
import traceback
from config import TOKEN, PREFIX, DEBUG_MODE
from utils.logger import get_logger

# Inicjalizacja loggera
logger = get_logger()

# Ustawienia intencji (Intents)
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True

# Inicjalizacja bota
bot = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)

# Konfiguracja zaawansowanego logowania
if DEBUG_MODE:
    import logging
    discord_logger = logging.getLogger('discord')
    discord_logger.setLevel(logging.DEBUG)
    logging.getLogger('discord.http').setLevel(logging.INFO)
    logging.getLogger('discord.voice_client').setLevel(logging.DEBUG)

@tasks.loop(hours=6)
async def cleanup_temp_files():
    """Okresowo czy≈õci pliki tymczasowe"""
    logger.info("Rozpoczynam czyszczenie plik√≥w tymczasowych...")
    try:
        from utils.helpers import YTDLSource
        await YTDLSource.cleanup_temp_files(max_age_hours=24)
    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas czyszczenia plik√≥w tymczasowych: {e}")

@bot.event
async def on_ready():
    """Wywo≈Çywane gdy bot jest gotowy i po≈ÇƒÖczony"""
    logger.info(f"Bot zalogowany jako {bot.user.name} ({bot.user.id})")
    
    # Ustaw status bota
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening, 
        name=f"{PREFIX}help_music | Muzyka"
    ))
    
    # Wy≈õwietl informacje o serwerach
    guild_count = len(bot.guilds)
    logger.info(f"Bot jest na {guild_count} serwerach")
    
    # Za≈Çaduj modu≈Çy
    await load_extensions()
    
    # Uruchom zadanie czyszczenia plik√≥w
    cleanup_temp_files.start()

@bot.event
async def on_command_error(ctx, error):
    """Obs≈Çuga b≈Çƒôd√≥w komend"""
    if isinstance(error, commands.CommandNotFound):
        return
    
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå Brakuje wymaganego argumentu: {error.param.name}")
        return
    
    if isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ùå Nieprawid≈Çowy argument: {str(error)}")
        return
    
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Nie masz wymaganych uprawnie≈Ñ do wykonania tej komendy.")
        return
    
    if isinstance(error, commands.BotMissingPermissions):
        await ctx.send("‚ùå Bot nie ma wymaganych uprawnie≈Ñ do wykonania tej komendy.")
        return
    
    # Loguj szczeg√≥≈Çy b≈Çƒôdu
    logger.error(f"B≈ÇƒÖd komendy {ctx.command}: {error}")
    if DEBUG_MODE:
        logger.error(traceback.format_exc())
    
    # Powiadom u≈ºytkownika
    await ctx.send(f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas wykonywania komendy: {str(error)}")

async def load_extensions():
    """≈Åaduje wszystkie rozszerzenia (cogs)"""
    # G≈Ç√≥wne modu≈Çy
    main_extensions = ['cogs.music']
    
    # Opcjonalne modu≈Çy - dodaj tutaj dodatkowe modu≈Çy
    optional_extensions = []
    
    # Za≈Çaduj g≈Ç√≥wne modu≈Çy
    for extension in main_extensions:
        try:
            await bot.load_extension(extension)
            logger.info(f"Za≈Çadowano modu≈Ç {extension}")
        except Exception as e:
            logger.error(f"Nie uda≈Ço siƒô za≈Çadowaƒá modu≈Çu {extension}: {e}")
            logger.error(traceback.format_exc())
    
    # Za≈Çaduj opcjonalne modu≈Çy (je≈õli istniejƒÖ)
    for extension in optional_extensions:
        try:
            await bot.load_extension(extension)
            logger.info(f"Za≈Çadowano opcjonalny modu≈Ç {extension}")
        except Exception as e:
            logger.warning(f"Nie uda≈Ço siƒô za≈Çadowaƒá opcjonalnego modu≈Çu {extension}: {e}")
    
    # Dodaj rozszerzenie diagnostyczne
    try:
        await bot.load_extension("cogs.diagnostics")
        logger.info("Za≈Çadowano modu≈Ç cogs.diagnostics")
    except Exception as e:
        logger.error(f"Nie uda≈Ço siƒô za≈Çadowaƒá modu≈Çu cogs.diagnostics: {e}")

@bot.command(name="ping", help="Sprawdza op√≥≈∫nienie bota")
async def ping(ctx):
    """Sprawdza op√≥≈∫nienie bota"""
    # Oblicz op√≥≈∫nienie bota
    latency = round(bot.latency * 1000)  # Konwersja na milisekundy
    
    # Utw√≥rz osadzony komunikat z informacjƒÖ o op√≥≈∫nieniu
    embed = discord.Embed(
        title="üèì Pong!",
        description=f"Op√≥≈∫nienie bota: **{latency}ms**",
        color=discord.Color.green() if latency < 200 else discord.Color.gold() if latency < 400 else discord.Color.red()
    )
    
    await ctx.send(embed=embed)

if __name__ == "__main__":
    try:
        # Uruchom bota
        asyncio.run(bot.start(TOKEN))
    except KeyboardInterrupt:
        logger.info("Bot zatrzymany przez u≈ºytkownika")
    except Exception as e:
        logger.critical(f"Krytyczny b≈ÇƒÖd: {e}")
        logger.critical(traceback.format_exc())